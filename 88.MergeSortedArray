Merge and Sort Simple and Quick Solution

ajbanning
Sep 12, 2024
C++

Intuition
Concatenate the input vectors, then sort.

Approach
Because nums1 contains default values of 0 at all m + i indexes, we need to overwrite those values with the values of nums2. Then use the std::sort() method to sort the the result.

Complexity

Time complexity:
O(Nlog(N))
Let m + n = N.
For loop: O(n)
Sort algorithm: O(Nlog(N))
Overall: O(Nlog(N)) > O(n) --> O(Nlog(N))

Space complexity:
O(m + n)
Space complexity of inputs: O(m + n)
Space complexity of std::sort(): O(log(n)) average case
Overall: O(m + n) > O(log(n)) --> O(m + n)


Code
class Solution {
public:
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
        int n2index = 0;
        for (int i = m; i < m + n; i++) {
            nums1[i] = nums2[n2index];
            n2index++;
        }

        sort(nums1.begin(), nums1.end());
    }
};
